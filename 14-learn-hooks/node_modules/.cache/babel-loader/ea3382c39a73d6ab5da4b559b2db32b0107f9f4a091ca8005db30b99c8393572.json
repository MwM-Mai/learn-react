{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\86188\\\\Desktop\\\\code-react\\\\14-learn-hooks\\\\src\\\\06-useCallback\\u4F7F\\u7528\\\\02-useCallback\\u8FDB\\u884C\\u7684\\u6027\\u80FD\\u4F18\\u5316.js\",\n  _s = $RefreshSig$();\n// useCallback 的实际目的是为了进行性能优化\n// useCallback 会返回一个函数memoized(记忆的)值\n// 在依赖不变的情况下(第二个参数为空数组), 多次定义的时候, 返回的值相同\n\nimport React, { useCallback, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HYButton = props => {\n  console.log();\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: e => props.increment(),\n    children: \"HYButton+1\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 10\n  }, this);\n};\n_c = HYButton;\nexport default function CallbackHookDemo02() {\n  _s();\n  console.log(\"CallbackHookDemo02重新渲染\");\n  const [count, setCount] = useState(0);\n  const [show, setShow] = useState(true);\n  const increment1 = () => {\n    console.log(\"执行increment1函数\");\n    setCount(count + 1);\n  };\n  const increment2 = useCallback(() => {\n    console.log(\"执行increment2函数\");\n    // 如果第二个参数是空数组 ,那么会形成一个闭包 count 一直都是指向外部 count 初始化的值 0 \n    setCount(count + 1);\n  }, [count]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"CallbackHookDemo01\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HYButton, {\n      title: \"btn1\",\n      increment: increment1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HYButton, {\n      title: \"btn2\",\n      increment: increment2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => setShow(!show),\n      children: \"\\u5207\\u6362\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(CallbackHookDemo02, \"5RbRbVPg5Z+IUg/MkTBbCPyoxGM=\");\n_c2 = CallbackHookDemo02;\nvar _c, _c2;\n$RefreshReg$(_c, \"HYButton\");\n$RefreshReg$(_c2, \"CallbackHookDemo02\");","map":{"version":3,"names":["React","useCallback","useState","jsxDEV","_jsxDEV","HYButton","props","console","log","onClick","e","increment","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","CallbackHookDemo02","_s","count","setCount","show","setShow","increment1","increment2","title","_c2","$RefreshReg$"],"sources":["C:/Users/86188/Desktop/code-react/14-learn-hooks/src/06-useCallback使用/02-useCallback进行的性能优化.js"],"sourcesContent":["// useCallback 的实际目的是为了进行性能优化\r\n// useCallback 会返回一个函数memoized(记忆的)值\r\n// 在依赖不变的情况下(第二个参数为空数组), 多次定义的时候, 返回的值相同\r\n\r\nimport React, { useCallback, useState } from 'react'\r\n\r\nconst HYButton = (props) => {\r\n  console.log();\r\n  return <button onClick={e => props.increment()}>HYButton+1</button>\r\n}\r\n\r\nexport default function CallbackHookDemo02() {\r\n  console.log(\"CallbackHookDemo02重新渲染\");\r\n\r\n  const [count, setCount] = useState(0)\r\n  const [show, setShow] = useState(true)\r\n\r\n  const increment1 = () => {\r\n    console.log(\"执行increment1函数\");\r\n    setCount(count + 1)\r\n  }\r\n\r\n  const increment2 = useCallback(() => {\r\n    console.log(\"执行increment2函数\");\r\n    // 如果第二个参数是空数组 ,那么会形成一个闭包 count 一直都是指向外部 count 初始化的值 0 \r\n    setCount(count + 1)\r\n  }, [count])\r\n\r\n  return (\r\n    <div>\r\n      <h2>CallbackHookDemo01</h2>\r\n      <h2>{count}</h2>\r\n      <HYButton title=\"btn1\" increment={increment1} />\r\n      <HYButton title=\"btn2\" increment={increment2} />\r\n\r\n      <button onClick={e => setShow(!show)}>切换</button>\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAC1BC,OAAO,CAACC,GAAG,EAAE;EACb,oBAAOJ,OAAA;IAAQK,OAAO,EAAEC,CAAC,IAAIJ,KAAK,CAACK,SAAS,EAAG;IAAAC,QAAA,EAAC;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAS;AACrE,CAAC;AAAAC,EAAA,GAHKZ,QAAQ;AAKd,eAAe,SAASa,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC3CZ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EAErC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACoB,IAAI,EAAEC,OAAO,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMsB,UAAU,GAAGA,CAAA,KAAM;IACvBjB,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7Ba,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;EACrB,CAAC;EAED,MAAMK,UAAU,GAAGxB,WAAW,CAAC,MAAM;IACnCM,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7B;IACAa,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;EACrB,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,oBACEhB,OAAA;IAAAQ,QAAA,gBACER,OAAA;MAAAQ,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAC3BZ,OAAA;MAAAQ,QAAA,EAAKQ;IAAK;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eAChBZ,OAAA,CAACC,QAAQ;MAACqB,KAAK,EAAC,MAAM;MAACf,SAAS,EAAEa;IAAW;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAChDZ,OAAA,CAACC,QAAQ;MAACqB,KAAK,EAAC,MAAM;MAACf,SAAS,EAAEc;IAAW;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAEhDZ,OAAA;MAAQK,OAAO,EAAEC,CAAC,IAAIa,OAAO,CAAC,CAACD,IAAI,CAAE;MAAAV,QAAA,EAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC7C;AAEV;AAACG,EAAA,CA3BuBD,kBAAkB;AAAAS,GAAA,GAAlBT,kBAAkB;AAAA,IAAAD,EAAA,EAAAU,GAAA;AAAAC,YAAA,CAAAX,EAAA;AAAAW,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}