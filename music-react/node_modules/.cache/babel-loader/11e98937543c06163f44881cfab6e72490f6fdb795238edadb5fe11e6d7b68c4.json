{"ast":null,"code":"import axios from 'axios';\n\n// 导入显示加载进度条的第三方库 在请求头中使用\nimport NProgress from 'nprogress';\n// 导入css\n// 直接在 cdn 加载 实现项目发布优化\n// import 'nprogress/nprogress.css'\n\nexport function request(config) {\n  // 1. 创建 axios 实例\n  const instance = axios.create({\n    baseURL: 'http://codercba.com:9002',\n    timeout: 5000\n  });\n\n  // 2. axios 拦截器\n  // 2.1 请求拦截 \n  // 在每次请求 request  展示进度条 NProgress.start();\n  instance.interceptors.request.use(config => {\n    // console.log(config);\n    // 显示进度条\n    NProgress.start();\n    config.headers.Authorization = window.sessionStorage.getItem('token');\n    // 必须return config\n    return config;\n  }); //  拦截请求 us 两个参数 都是函数 函数本身也有参数\n\n  // 2.2 响应拦截的作用\n  // 在每次响应 response 隐藏进度条 NProgress.done(); \n  instance.interceptors.response.use(res => {\n    // 隐藏进度条\n    NProgress.done();\n    return res.data;\n  }); //  拦截响应 也是两个参数\n\n  // 3. 发送真正的网络请求\n  return instance(config); // 源码表示 最终的返回值是 Promise\n}","map":{"version":3,"names":["axios","NProgress","request","config","instance","create","baseURL","timeout","interceptors","use","start","headers","Authorization","window","sessionStorage","getItem","response","res","done","data"],"sources":["C:/Users/86188/Desktop/code-react/music-react/src/services/index.js"],"sourcesContent":["import axios from 'axios'\r\n\r\n// 导入显示加载进度条的第三方库 在请求头中使用\r\nimport NProgress from 'nprogress'\r\n// 导入css\r\n// 直接在 cdn 加载 实现项目发布优化\r\n// import 'nprogress/nprogress.css'\r\n\r\nexport function request(config) {\r\n  // 1. 创建 axios 实例\r\n  const instance = axios.create({\r\n    baseURL: 'http://codercba.com:9002',\r\n    timeout: 5000\r\n  })\r\n\r\n  // 2. axios 拦截器\r\n  // 2.1 请求拦截 \r\n  // 在每次请求 request  展示进度条 NProgress.start();\r\n  instance.interceptors.request.use(config => {\r\n    // console.log(config);\r\n    // 显示进度条\r\n    NProgress.start();\r\n\r\n    config.headers.Authorization = window.sessionStorage.getItem('token')\r\n    // 必须return config\r\n    return config\r\n  })   //  拦截请求 us 两个参数 都是函数 函数本身也有参数\r\n\r\n  // 2.2 响应拦截的作用\r\n  // 在每次响应 response 隐藏进度条 NProgress.done(); \r\n  instance.interceptors.response.use(res => {\r\n    // 隐藏进度条\r\n    NProgress.done();\r\n    return res.data\r\n  })  //  拦截响应 也是两个参数\r\n\r\n  // 3. 发送真正的网络请求\r\n  return instance(config)   // 源码表示 最终的返回值是 Promise\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAOC,SAAS,MAAM,WAAW;AACjC;AACA;AACA;;AAEA,OAAO,SAASC,OAAOA,CAACC,MAAM,EAAE;EAC9B;EACA,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAM,CAAC;IAC5BC,OAAO,EAAE,0BAA0B;IACnCC,OAAO,EAAE;EACX,CAAC,CAAC;;EAEF;EACA;EACA;EACAH,QAAQ,CAACI,YAAY,CAACN,OAAO,CAACO,GAAG,CAACN,MAAM,IAAI;IAC1C;IACA;IACAF,SAAS,CAACS,KAAK,EAAE;IAEjBP,MAAM,CAACQ,OAAO,CAACC,aAAa,GAAGC,MAAM,CAACC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IACrE;IACA,OAAOZ,MAAM;EACf,CAAC,CAAC,EAAG;;EAEL;EACA;EACAC,QAAQ,CAACI,YAAY,CAACQ,QAAQ,CAACP,GAAG,CAACQ,GAAG,IAAI;IACxC;IACAhB,SAAS,CAACiB,IAAI,EAAE;IAChB,OAAOD,GAAG,CAACE,IAAI;EACjB,CAAC,CAAC,EAAE;;EAEJ;EACA,OAAOf,QAAQ,CAACD,MAAM,CAAC,EAAG;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}